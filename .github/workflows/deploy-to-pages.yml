name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  # Allow manual triggering
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      # Prepare environment variables for the Angular build
      - name: Set environment variables
        run: |
          echo "DEPLOYMENT_BASE_HREF=/${{ github.event.repository.name }}/" >> $GITHUB_ENV
          echo "ASSETS_BASE_PATH=/${{ github.event.repository.name }}" >> $GITHUB_ENV

      # Build with the correct base-href and environment configuration
      - name: Build application
        run: npm run build -- --base-href "${{ env.DEPLOYMENT_BASE_HREF }}" --configuration production

      # Create a .nojekyll file to prevent GitHub Pages from ignoring files that begin with an underscore
      - name: Create .nojekyll file
        run: touch ./dist/web-app/browser/.nojekyll

      # Fix asset paths in generated HTML and CSS files
      - name: Fix asset paths
        run: |
          find ./dist/web-app/browser -name "*.html" -exec sed -i "s|=\"/assets/|=\"${{ env.ASSETS_BASE_PATH }}/assets/|g" {} \;
          find ./dist/web-app/browser -name "*.css" -exec sed -i "s|url(\"/assets/|url(\"${{ env.ASSETS_BASE_PATH }}/assets/|g" {} \;
          # Also fix paths to the docs/images if they're referenced directly
          find ./dist/web-app/browser -name "*.html" -exec sed -i "s|=\"/docs/images/|=\"${{ env.ASSETS_BASE_PATH }}/docs/images/|g" {} \;

      # Handle image paths - copy from public directory to the correct location
      - name: Copy images from public folder
        run: |
          # Copy all public assets maintaining their structure
          cp -r ./public/* ./dist/web-app/browser/ || echo "No public files to copy"
          # If you have docs/images referenced specifically, ensure that directory exists
          mkdir -p ./dist/web-app/browser/docs/images

      # Debug step to verify the files are in place
      - name: Debug file structure
        run: |
          echo "Contents of dist/web-app/browser:"
          ls -la ./dist/web-app/browser
          echo "Contents of docs directory (if it exists):"
          ls -la ./dist/web-app/browser/docs || echo "No docs directory"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # The path to the built application files
          path: "./dist/web-app/browser"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
